{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\network/assets\\scripts\\network\\NetworkManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\network","sourcesContent":["let talefun = (<any>cc).talefun;\r\nimport ObjectManager from \"../object/ObjectManager\";\r\nimport UserDataModel from \"../object/model/userModel/UserDataModel\";\r\nimport EventManager from \"../event/EventManager\";\r\nimport EventType from \"../event/EventType\";\r\nimport { CodeConst, RequestData } from \"./HttpType\";\r\nimport MyHttpClient from \"./MyHttpClient\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NetworkManager {\r\n\r\n    private _httpClient: MyHttpClient = null;\r\n\r\n    constructor() {\r\n       \r\n    }\r\n\r\n    initNetwork() {\r\n        this._httpClient = new MyHttpClient(\r\n            this._beginCallback.bind(this), \r\n            this._networkCallback.bind(this), \r\n            MyHttpClient.CN_SERVER, \r\n            {name: \"com.queensgame.solitaire.journey\", platform: \"android\"}\r\n        );\r\n\r\n        let userDataModel: UserDataModel = <UserDataModel>ObjectManager.getInstance().getModelByName(\"userDataModel\");\r\n\r\n        if (userDataModel) {\r\n            let token = userDataModel.getToken();\r\n            if (token) {\r\n                cc.log(\"=====================\");\r\n                cc.log(token);\r\n                cc.log(\"=====================\");\r\n                this.httpClient.setSessionToken(token);\r\n            }\r\n        }\r\n    }\r\n\r\n    get httpClient(): MyHttpClient {\r\n        return this._httpClient;\r\n    }\r\n\r\n    private _beginCallback() {\r\n        EventManager.getInstance().dispatchEvent(EventType.NETWORK_BEGIN, {});\r\n    }\r\n\r\n    private _networkCallback(status: CodeConst, data: any, request: RequestData) {\r\n        EventManager.getInstance().dispatchEvent(EventType.NETWORK_COMPLETE, {});\r\n\r\n        let apiName = [\"NOREQUEST\"];\r\n        if (request != undefined) {\r\n            apiName = request.path.split(\"/\");\r\n        } else {\r\n            talefun.LogHelper.log(\"_networkCallback: request is undefind\");\r\n        }\r\n\r\n        cc.log(\"==========================================******************\");\r\n        talefun.LogHelper.dump(data);\r\n        cc.log(\"==========================================******************\");\r\n\r\n        if (status === CodeConst.REQUEST_SUCCESS) {\r\n            this._dataParse(data, request);\r\n        }\r\n    }\r\n\r\n    private _dataParse(data: any, request: RequestData) {\r\n        let userDataModel: UserDataModel = <UserDataModel>ObjectManager.getInstance().getModelByName(\"userDataModel\");\r\n        if (userDataModel) {\r\n            userDataModel.parseDataFromServer(data);\r\n        }\r\n    }\r\n\r\n    static _instance: NetworkManager;\r\n\r\n    static getInstance():NetworkManager\r\n    {\r\n        if(NetworkManager._instance == null)\r\n        {\r\n            NetworkManager._instance = new NetworkManager();\r\n        }\r\n        return NetworkManager._instance;\r\n    }\r\n}"]}