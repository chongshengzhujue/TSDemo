{"version":3,"sources":["BasicTableView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/scripts/viewCtrl/base","sourcesContent":["// Learn TypeScript:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/typescript/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nimport BasicTableViewCell from \"./BasicTableViewCell\";\n\nimport BasicTableDataClass from \"./BasicTableDataClass\";\nimport UserComponent from \"./UserComponent\";\nimport BasicViewCtrl from \"./BasicViewCtrl\";\nimport ViewManager from \"../ViewManager\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class BasicTableView extends UserComponent {\n\n    @property(cc.Prefab)\n    cellPrefab: cc.Prefab = null;\n\n    @property\n    cellComponent: string = \"\";\n\n    cellNodePool: BasicViewCtrl[] = null;\n\n    scrollView: cc.ScrollView = null;\n\n    scrollPos: cc.Vec2 = cc.p(0, 0);\n\n    inCellMap: BasicViewCtrl[] = null;\n\n    beginCellIndex: 0;\n\n    dataList: BasicTableDataClass[];\n\n    maxCellIdx: number = 0;\n    minCellIdx: number = 0;\n\n    maxCellNum: number = 5;\n\n    cellNum: number = 0;\n\n    viewCtrl: BasicViewCtrl;\n\n    onLoad () {\n        this.scrollView = this.node.getComponent(\"cc.ScrollView\");\n        this.scrollView.setContentPosition(cc.p(0, 0));\n\n        this.cellNodePool = new Array<BasicViewCtrl>();\n        this.inCellMap = new Array<BasicViewCtrl>();\n    }\n\n    start () {\n        // this.reloadData([\n        //     new BasicTableDataClass({id : 1, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 2, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 3, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 4, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 5, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 6, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 7, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 8, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 9, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 9, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 10, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 11, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 12, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 13, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 14, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 15, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 16, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 17, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 18, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 19, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 20, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 21, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 22, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 23, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 24, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 25, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 26, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 27, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 28, cellSize : cc.size(200, 200)}),\n        //     new BasicTableDataClass({id : 29, cellSize : cc.size(200, 200)}),\n        // ]);\n    }\n\n    reloadData (dataList: BasicTableDataClass[], isResetPos?: boolean) {\n        this.dataList = dataList;\n        for (let i in this.inCellMap) {\n            let idx = parseInt(i);\n            this._putTableCellByIdx(idx);\n        }\n        this._resetScrollContentSize();\n        this._resetTableView(isResetPos);\n    }\n\n    cellIsInScroll (cellRect: cc.Rect) {\n        let originPos = cellRect.origin;\n    }\n\n    setContentOffset (offset: cc.Vec2) {\n        let scrollSize = this.scrollView.content.getContentSize();\n        if (this.scrollView.horizontal) {\n            this.scrollView.scrollToPercentHorizontal(offset.x / scrollSize.height, 0);\n        } else if(this.scrollView.vertical) {\n            this.scrollView.scrollToPercentHorizontal(offset.y / scrollSize.width, 0);\n        }\n\n        this.reloadData(this.dataList, false);\n    }\n\n    tableCellAtIndex (idx) {\n\n    }\n\n    private onScrollEvent (scrollview, event) {\n        if(event === cc.ScrollView.EventType.SCROLLING) {\n            this._onScrollMove(scrollview);\n        }\n    }\n\n   \n\n    private _onScrollMove (scrollview: cc.ScrollView) {\n        let contentOff = scrollview.getContentPosition();\n        let contentSize = scrollview.node.getContentSize();\n        this._updateTableView();\n    }\n\n    private _getTableCell (): BasicViewCtrl {\n        let cell = null;\n        if (this.cellNodePool.length > 0) {\n            cell = this.cellNodePool[this.cellNodePool.length - 1];\n            this.cellNodePool.splice(this.cellNodePool.length - 1)\n            cell.rootView.active = true;\n        } else if(this.cellNum < this.maxCellNum) {\n            cell = ViewManager.getInstance().showPrefab(this.cellPrefab.name, this.cellPrefab, {}, this.scrollView.content, this.viewCtrl);\n            this.cellNum++;\n            cc.log(\"========================new cell\")\n        }\n\n        return cell;\n    }\n\n    private _resetTableView (isResetPos?: boolean) {\n        let viewSize = this.scrollView.node.getContentSize();\n        let isBegin = false;\n        if (this.scrollView.horizontal) {\n            let contenWidth = 0;\n            if (isResetPos) {\n                this.scrollView.setContentPosition(cc.p(viewSize.width*0.5, 0));\n            }\n            let contentPosX = (<any>(this.scrollView.getContentPosition())).x;\n            for (let i = 0; i < this.dataList.length; i++) {\n                if (contenWidth > contentPosX + viewSize.width) {\n                    if (isBegin) {\n                        this.maxCellIdx = i - 1;\n                    }\n                    break;\n                }\n\n                let data: BasicTableDataClass = this.dataList[i];\n                contenWidth += data.cellSize.width;\n                this._resetMaxCellNum(false, viewSize, data.cellSize);\n                \n\n                if (contenWidth > contentPosX) {\n                    this._setCellData(i);\n                    if (!isBegin) {\n                        this.minCellIdx = i;\n                        isBegin = true;\n                    }\n                }\n            }\n        } else if (this.scrollView.vertical) {\n            let contenHeight = 0;\n            if (isResetPos) {\n                this.scrollView.setContentPosition(cc.p(0, viewSize.height*0.5));\n            }\n\n            let contentPosY = this.scrollView.getContentPosition().y;\n            for (let i = 0; i < this.dataList.length; i++) {\n                if (contenHeight > contentPosY + viewSize.height) {\n                    if (isBegin) {\n                        this.maxCellIdx = i - 1;\n                    }\n                    break;\n                }\n\n                let data: BasicTableDataClass = this.dataList[i];\n                contenHeight += data.cellSize.height;\n                this._resetMaxCellNum(true, viewSize, data.cellSize);\n\n                if (contenHeight > contentPosY) {\n                    this._setCellData(i);\n                    if (!isBegin) {\n                        this.minCellIdx = i;\n                        isBegin = true;\n                    }\n                }\n            }\n        }\n    }\n\n    private _updateTableView () {\n        let viewSize = this.scrollView.node.getContentSize();\n        \n        let beginCell = this.inCellMap[this.minCellIdx];\n        let endCell = this.inCellMap[this.maxCellIdx];\n        \n        if (!beginCell || !endCell) {\n            return;\n        }\n\n        let beginCellBox = beginCell.rootView.getBoundingBox();\n        let beginCellSize = beginCellBox.size;\n        let beginCellOrigin = beginCellBox.origin;\n\n        let endCellBox = endCell.rootView.getBoundingBox();\n        let endCellSize = endCellBox.size;\n        let endCellOrigin = endCellBox.origin;\n\n        let isChangeLayout: boolean = false;\n\n        if (this.scrollView.horizontal) {\n            let contentPosX = -(this.scrollView.getContentPosition().x);\n            if (beginCellOrigin.x + beginCellSize.width < contentPosX - 100) {\n                this._putTableCellByIdx(this.minCellIdx);\n                this.minCellIdx++;\n                cc.log(\"=======================================put cell left\" + this.minCellIdx)\n            } else if (endCellOrigin.x > contentPosX + viewSize.width + 100) {\n                this._putTableCellByIdx(this.maxCellIdx);\n                this.maxCellIdx--;\n                cc.log(\"=======================================put cell right\" + this.maxCellIdx)                \n                //emptyCellSize.height += beginCellSize.height;\n            } else if(endCellOrigin.x + endCellSize.width < contentPosX + viewSize.width + 100) {\n                this.maxCellIdx++;\n                if (this.maxCellIdx < this.dataList.length) {\n                    let cell = this._setCellData(this.maxCellIdx);\n                    cc.log(\"=======================================new cell right\" + this.maxCellIdx);\n                    this._resetMaxCellNum(true, viewSize, endCellSize);\n                } else {\n                    this.maxCellIdx = this.dataList.length - 1\n                }\n            } else if(contentPosX < beginCellOrigin.x + 100) {\n                this.minCellIdx--;\n                if (this.minCellIdx >= 0) {\n                    let cell = this._setCellData(this.minCellIdx);\n                    cc.log(\"=======================================new cell left\" + this.minCellIdx)\n                } else {\n                    this.minCellIdx = 0;\n                }\n            }\n\n        } else if (this.scrollView.vertical) {\n            let contentPosY = -(this.scrollView.getContentPosition().y);\n            if (beginCellOrigin.y > contentPosY + 100) {\n                this._putTableCellByIdx(this.minCellIdx);\n                this.minCellIdx++;\n                cc.log(\"=======================================put cell up\" + this.minCellIdx)\n            } else if (endCellOrigin.y + endCellSize.height < contentPosY - viewSize.height - 100) {\n                this._putTableCellByIdx(this.maxCellIdx);\n                this.maxCellIdx--;\n                cc.log(\"=======================================put cell down\" + this.maxCellIdx)                \n                //emptyCellSize.height += beginCellSize.height;\n            } else if(endCellOrigin.y > contentPosY - viewSize.height - 100) {\n                this.maxCellIdx++;\n                if (this.maxCellIdx < this.dataList.length) {\n                    let cell = this._setCellData(this.maxCellIdx);\n                    cc.log(\"=======================================new cell down\" + this.maxCellIdx);\n                    this._resetMaxCellNum(true, viewSize, endCellSize);\n                } else {\n                    this.maxCellIdx = this.dataList.length - 1\n                }\n            } else if(contentPosY > beginCellOrigin.y + beginCellSize.height-100) {\n                this.minCellIdx--;\n                if (this.minCellIdx >= 0) {\n                    let cell = this._setCellData(this.minCellIdx);\n                    cc.log(\"=======================================new cell up\" + this.minCellIdx)\n                } else {\n                    this.minCellIdx = 0;\n                }\n            }\n        }\n    }\n\n    private _putTableCellByIdx (idx: number) {\n        let cell = this.inCellMap[idx];\n        this.inCellMap[idx] = undefined;\n        if (cell) {\n            cell.rootView.active = false;\n            cell.parentNode = undefined;\n            cell.parentViewCtrl = undefined;\n            this.cellNodePool.splice(this.cellNodePool.length - 1, 0, cell);\n            //cc.log(\"=======================================put cell\" + this.cellNodePool.size());\n        }\n        \n    }\n\n    private _setCellData (idx: number) {\n        let cell = this._getTableCell();\n        if (!cell) {\n            return;\n        }\n\n        this.inCellMap[idx] = cell;\n        if (cell.rootView.parent == undefined) {\n            this.scrollView.content.addChild(cell.rootView, idx);\n            cell.parentNode = this.scrollView.content;\n        }\n\n        if (cell.parentViewCtrl == undefined) {\n            cell.parentViewCtrl = this.viewCtrl;\n        }\n        let pos = this._getCellPosByIndex(idx);\n        cell.rootView.setPosition(pos);\n        let cellComponent = cell.rootView.getComponent(this.cellComponent);\n        if (cellComponent) {\n            let data = this.dataList[idx];\n            cellComponent.setData(data);\n        }\n    }\n\n    private _resetMaxCellNum(isVertical: boolean, scrollSize: cc.Size, cellSize: cc.Size) {\n        let tempValue = 0;\n        if (isVertical) {\n            tempValue = Math.ceil(scrollSize.height / cellSize.height) + 3;\n        } else {\n            tempValue = Math.ceil(scrollSize.width / cellSize.width) + 3;\n        }\n\n        this.maxCellNum = Math.max(tempValue, this.maxCellNum);\n    }\n\n    private _sortInCellMap() {\n        for (let i in this.inCellMap) {\n            let cell = this.inCellMap[i];\n\n            if (cell) {\n                cell.rootView.removeFromParent(false);\n                this.scrollView.content.addChild(cell.rootView, parseInt(i));\n            }\n        }\n    }\n\n    private _resetScrollContentSize() {\n        let contentSize = this.scrollView.node.getContentSize();\n        if (this.scrollView.horizontal) {\n            contentSize.width = 0;\n        } else {\n            contentSize.height = 0;\n        }\n        for (let i = 0; i < this.dataList.length; i++) {\n            let data = this.dataList[i];\n            if (this.scrollView.horizontal) {\n                contentSize.width += data.cellSize.width;\n            } else {\n                contentSize.height += data.cellSize.height;\n            }\n        }\n\n        this.scrollView.content.setContentSize(contentSize);\n    }\n\n    private _getCellPosByIndex(index: number) {\n        let lastIndex = index - 1;\n        let nextIndex = index + 1;\n        let lastCell;\n        let nextCell;\n        if (lastIndex < 0 || this.inCellMap[lastIndex] == undefined) {\n            nextCell = this.inCellMap[nextIndex];\n            if (nextCell === undefined) {\n                return cc.p(0, 0);\n            }\n            let pos = nextCell.rootView.getPosition();\n            let nowCellData = this.dataList[index];\n            if (nowCellData === undefined) {\n                return pos;\n            }\n            if (this.scrollView.horizontal) {\n                let resPos = cc.p(pos.x - nowCellData.cellSize.width, pos.y);\n                return resPos;\n            } else {\n                let resPos = cc.p(pos.x, pos.y + nowCellData.cellSize.height);\n                return resPos;\n            }\n\n        } else {\n            lastCell = this.inCellMap[lastIndex];\n            let pos = lastCell.rootView.getPosition();\n            let lastCellData = this.dataList[lastIndex];\n            if (lastCellData === undefined) {\n                return pos;\n            }\n            if (this.scrollView.horizontal) {\n                let resPos = cc.p(pos.x + lastCellData.cellSize.width, pos.y);\n                return resPos;\n            } else {\n                let resPos = cc.p(pos.x, pos.y - lastCellData.cellSize.height);\n                return resPos;\n            }\n        }\n\n        return cc.p(0, 0);\n    }\n    // update (dt) {},\n}   "]}