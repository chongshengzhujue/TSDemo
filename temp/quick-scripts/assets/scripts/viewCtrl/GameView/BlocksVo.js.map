{"version":3,"sources":["BlocksVo.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\viewCtrl\\GameView","sourcesContent":["import BlockCellVo from \"./BlockCellVo\";\r\nimport GameConst from \"./GameConst\";\r\nimport { BlockState } from \"./GameEnum\";\r\n\r\nexport default class BlocksVo {\r\n\r\n    //小块的数组\r\n    blockCells : BlockCellVo[] = [];\r\n\r\n    //大块的尺寸\r\n    blocksNodeSize : cc.Size = cc.size(0, 0);\r\n\r\n    //blocks的渲染节点\r\n    blocksNode : cc.Node;\r\n\r\n    minVec : cc.Vec2;\r\n\r\n    maxVec : cc.Vec2;\r\n\r\n    blockState: BlockState = BlockState.BLOCK_STATE_BOTTOM;\r\n\r\n    lastState : BlockState = BlockState.BLOCK_STATE_BOTTOM;\r\n\r\n    lastPos : cc.Vec2 = cc.p(0, 0);\r\n\r\n    constructor() {\r\n        this.blocksNode = new cc.Node();\r\n        this.blocksNode.setAnchorPoint(cc.p(0.5, 0.5));\r\n        //this.blocksNode.addComponent(cc.Graphics);\r\n    }\r\n\r\n    addBlock(cellIdx: number, posVecIdx: cc.Vec2, colorIdx: number) {\r\n        let blockCellVo = new BlockCellVo();\r\n        blockCellVo.initBlockSprite(cellIdx, posVecIdx, colorIdx, this.blocksNode);\r\n        this.blockCells.push(blockCellVo);\r\n    }\r\n\r\n    resetContentSize() {\r\n        let minX = 1000;\r\n        let minY = 1000;\r\n        let maxX = 0;\r\n        let maxY = 0;\r\n        for (let i in this.blockCells) {\r\n            let cellVo: BlockCellVo = this.blockCells[i];\r\n            if (cellVo) {\r\n                if (cellVo.posVecIdx.x < minX) {\r\n                    minX = cellVo.posVecIdx.x;\r\n                }\r\n\r\n                if (cellVo.posVecIdx.y < minY) {\r\n                    minY = cellVo.posVecIdx.y;\r\n                }\r\n\r\n                if (cellVo.posVecIdx.x > maxX) {\r\n                    maxX = cellVo.posVecIdx.x;\r\n                }\r\n\r\n                if (cellVo.posVecIdx.y > maxY) {\r\n                    maxY = cellVo.posVecIdx.y;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.minVec = cc.p(minX, minY);\r\n        this.maxVec = cc.p(maxX, maxY);\r\n        \r\n        this.blocksNodeSize = cc.size(maxX - minX + 1, maxY - minY + 1);\r\n\r\n        let contentWidth = GameConst.BLOCK_SIDE * this.blocksNodeSize.width;\r\n        let contentHeight = GameConst.BLOCK_SIDE * this.blocksNodeSize.height;\r\n\r\n        this.blocksNode.setContentSize(contentWidth, contentHeight);\r\n        cc.log(\"contentWidth \" + contentWidth);\r\n        cc.log(\"contentHeight \" + contentHeight);\r\n\r\n        let orginPos = cc.p(-contentWidth*0.5, -contentHeight*0.5)\r\n        for (let i in this.blockCells) {\r\n            let cellVo: BlockCellVo = this.blockCells[i];\r\n            cellVo.posVecIdx.x = cellVo.posVecIdx.x - minX;\r\n            cellVo.posVecIdx.y = cellVo.posVecIdx.y - minY;\r\n            let offPosX = cellVo.posVecIdx.x * GameConst.BLOCK_SIDE;\r\n            let offPosY = cellVo.posVecIdx.y * GameConst.BLOCK_SIDE;\r\n            cellVo.blockSprite.setPosition(orginPos.x + offPosX, orginPos.y + offPosY);\r\n            \r\n        }\r\n        //let graphics: cc.Graphics = this.blocksNode.getComponent(cc.Graphics);\r\n\r\n        // graphics.strokeColor = cc.color(255, 0, 0, 255);\r\n        // graphics.lineWidth = 5;\r\n        // graphics.moveTo(0, 0);\r\n        // graphics.lineTo(0, contentHeight);\r\n        // graphics.lineTo(contentWidth, contentHeight);\r\n        // graphics.lineTo(contentWidth, 0);\r\n        // graphics.lineTo(0, 0);\r\n\r\n        // graphics.stroke();\r\n    }\r\n\r\n    checkIsContainPoint(point: cc.Vec2): boolean {\r\n        if(!this.blocksNode.getBoundingBox().contains(point)) {\r\n            return;\r\n        }\r\n\r\n\r\n        let origin = this.blocksNode.getBoundingBox().origin;\r\n        let inCellPos = cc.p(point.x - origin.x, point.y - origin.y);\r\n\r\n        let scaleBlockSide = GameConst.BLOCK_SIDE * this.blocksNode.scale;\r\n        let posVecIdx = cc.p(Math.floor(inCellPos.x / scaleBlockSide), Math.floor(inCellPos.y / scaleBlockSide));\r\n\r\n\r\n        for(let i in this.blockCells) {\r\n            let blockCell = this.blockCells[i];\r\n            if (blockCell) {\r\n                if (blockCell.posVecIdx.x == posVecIdx.x && blockCell.posVecIdx.y == posVecIdx.y) {\r\n                    return true; \r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    layUpBlock() {\r\n        this.setState(BlockState.BLOCK_STATE_BOARD);\r\n        for (let i in this.blockCells) {\r\n            let cell = this.blockCells[i];\r\n            if (cell) {\r\n                if (cell.linkBlcokVo != null && cell.linkBlcokVo != undefined) {\r\n                    let linkCellOrigin = cell.linkBlcokVo.blockSprite.getBoundingBoxToWorld().origin;\r\n                    let cellOrigin = cell.blockSprite.getBoundingBoxToWorld().origin;\r\n                    let offPosX = linkCellOrigin.x - cellOrigin.x;\r\n                    let offPosY = linkCellOrigin.y - cellOrigin.y;\r\n                    \r\n                    let blocksPos = this.blocksNode.getPosition();\r\n                    this.blocksNode.setPositionX(blocksPos.x + offPosX);\r\n                    this.blocksNode.setPositionY(blocksPos.y + offPosY);\r\n                    break;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    checkIsCanLayUp() {\r\n        for(let i in this.blockCells) {\r\n            let cell = this.blockCells[i];\r\n            if (cell.linkBlcokVo == null || cell.linkBlcokVo == undefined || cell.linkBlcokVo.linkedBlockNum > 1) {\r\n                return false;\r\n            } else {\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    removeSelf() {\r\n        for (let i in this.blockCells) {\r\n            let cell = this.blockCells[i];\r\n            if (cell) {\r\n                cell.removeSelf();\r\n            }\r\n        }\r\n\r\n        this.blocksNode.removeFromParent();\r\n        this.blockCells.splice(0, this.blockCells.length);\r\n    }\r\n\r\n    setState(state: BlockState) {\r\n        this.blockState = state;\r\n        if (state == BlockState.BLOCK_STATE_BOARD) {\r\n            this.blocksNode.scale = 1;\r\n            this.blocksNode.setLocalZOrder(GameConst.BLOCK_NORMAL_ZORDER);\r\n        } else if (state == BlockState.BLOCK_STATE_BOARD_TIPS) {\r\n            this.blocksNode.scale = 1;\r\n            this.blocksNode.setLocalZOrder(GameConst.BLOCK_NORMAL_ZORDER);\r\n            this.setNumLabel(1);\r\n        } else if (state == BlockState.BLOCK_STATE_BOTTOM) {\r\n            this.blocksNode.scale = 0.5;\r\n            this.blocksNode.setLocalZOrder(GameConst.BLOCK_NORMAL_ZORDER);\r\n        } else if (state == BlockState.BLOCK_STATE_MOVING) {\r\n            this.blocksNode.scale = 1;\r\n            this.blocksNode.setLocalZOrder(GameConst.BLOCK_MOVING_ZORDER);\r\n            this\r\n        }\r\n    }\r\n\r\n    setTouchPosition(pos: cc.Vec2) {\r\n        let contenSize = this.blocksNode.getContentSize();\r\n        let paddingY = 50;\r\n        this.blocksNode.setPosition(pos.x, paddingY + contenSize.height*0.5 + pos.y);\r\n    }\r\n\r\n    toLastState() {\r\n        this.setState(this.lastState);\r\n        this.blocksNode.setPosition(this.lastPos);\r\n    }\r\n\r\n    setNumLabel(num: number) {\r\n        for (let i in this.blockCells) {\r\n            let cell = this.blockCells[i];\r\n            if (cell) {\r\n                cell.setNumLabel(num);\r\n            }\r\n        }\r\n    }\r\n }"]}